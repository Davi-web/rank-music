import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import type { inferProcedureOutput } from "@trpc/server";
import type { AppRouter } from "@acme/api";
import { useAuth, UserButton } from "@clerk/nextjs";
import Link from "next/link";
import { useMemo, useState } from "react";
import { useRouter } from "next/router";
import { getOptionsForVote } from "../utils/getRandomSongs";
import Image from "next/image";

const PostCard: React.FC<{
  post: inferProcedureOutput<AppRouter["post"]["all"]>[number];
}> = ({ post }) => {
  return (
    <div className="max-w-2xl rounded-lg border-2 border-gray-500 p-4 transition-all hover:scale-[101%]">
      <h2 className="text-2xl font-bold text-[hsl(280,100%,70%)]">
        {post.title}
      </h2>
      <p>{post.content}</p>
    </div>
  );
};

const Home: NextPage = () => {
  const [ids, setIds] = useState(() => getOptionsForVote());
  const [first, second] = ids;
  const getFirstSong = trpc.song.byId.useQuery(parseInt(first));
  const getSecondSong = trpc.song.byId.useQuery(parseInt(second));
  const castVote = trpc.song.voteForSong.useMutation();
  console.log(getFirstSong.data);
  console.log(getSecondSong.data);
  const router = useRouter();

  const voteForSong = (votedFor: number, votedAgainst: number) => {
    castVote.mutate({
      votedFor,
      votedAgainst,
    });
    setIds(getOptionsForVote());
  };
  const dataLoaded =
    !getFirstSong.isLoading &&
    !getSecondSong.isLoading &&
    getFirstSong.data &&
    getSecondSong.data;
  const { isSignedIn } = useAuth();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-8">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            Billboard's{" "}
            <span className="text-[hsl(280,100%,70%)]">Top 100</span> Songs
          </h1>
          <AuthShowcase />
          {!dataLoaded && (
            <Image src="/bars.svg" alt="Loading" height={200} width={200} />
          )}
          {dataLoaded && (
            <div className="grid grid-cols-2 gap-24">
              <div className="flex h-full w-full flex-col justify-center align-middle">
                <a
                  href={`https://youtube.com/results?search_query=${getFirstSong.data?.title.replace(
                    / /g,
                    "+",
                  )}+${getFirstSong.data?.artist.replace(/ /g, "+")}`}
                  target="_blank"
                  rel="noreferrer"
                >
                  <div className="flex flex-col gap-4 text-center">
                    <Image
                      src={getFirstSong.data?.cover}
                      width={200}
                      height={200}
                      alt="Song Cover"
                      className="self-center"
                      loading="lazy"
                    />
                    <p className="text-sm">{getFirstSong.data?.title}</p>
                    <p className="text-sm">{getFirstSong.data?.artist}</p>
                  </div>
                </a>
                <button
                  onClick={() =>
                    voteForSong(
                      getFirstSong.data?.rank,
                      getSecondSong.data?.rank,
                    )
                  }
                  className="w-full rounded-md bg-[hsl(280,100%,70%)] px-4 py-2 text-white"
                >
                  Vote Thumbs up
                </button>
              </div>
              <div className="flex w-full flex-col justify-center">
                <a
                  href={`https://youtube.com/results?search_query=${getSecondSong.data?.title.replace(
                    / /g,
                    "+",
                  )}+${getSecondSong.data?.artist.replace(/ /g, "+")}`}
                  target="_blank"
                  rel="noreferrer"
                >
                  <div className="flex w-full flex-col justify-center gap-4 text-center align-middle">
                    <Image
                      src={getSecondSong.data?.cover}
                      width={200}
                      height={200}
                      alt="Song Cover"
                      className="self-center"
                      loading="lazy"
                    />

                    <p className="text-sm">{getSecondSong.data?.title}</p>
                    <p className="text-sm">{getSecondSong.data?.artist}</p>
                  </div>
                </a>
                <button
                  onClick={() =>
                    voteForSong(
                      getFirstSong.data?.rank,
                      getSecondSong.data?.rank,
                    )
                  }
                  className="w-full rounded-md bg-[hsl(280,100%,70%)] px-4 py-2 text-white"
                >
                  Vote Thumbs up
                </button>
              </div>
            </div>
          )}

          {/* <div className="flex h-[60vh] justify-center overflow-y-scroll px-4 text-2xl">
            {postQuery.data ? (
              <div className="flex flex-col gap-4">
                {postQuery.data?.map((p) => {
                  return <PostCard key={p.id} post={p} />;
                })}
              </div>
            ) : (
              <p>Loading..</p>
            )}
          </div> */}
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { isSignedIn } = useAuth();
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined,
    { enabled: !!isSignedIn },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {isSignedIn && (
        <>
          <p className="text-center text-2xl text-white">
            {secretMessage && (
              <span>
                {" "}
                {secretMessage} click the user button!
                <br />
              </span>
            )}
          </p>
          <div className="flex items-center justify-center">
            <UserButton
              appearance={{
                elements: {
                  userButtonAvatarBox: {
                    width: "3rem",
                    height: "3rem",
                  },
                },
              }}
            />
          </div>
        </>
      )}
      {!isSignedIn && (
        <p className="text-center text-2xl text-white">
          <Link href="/sign-in">Sign In</Link>
        </p>
      )}
    </div>
  );
};
